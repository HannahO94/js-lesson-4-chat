{"version":3,"sources":["components/MyInput.jsx","components/Messages.jsx","pages/ChatRoom.jsx","pages/NewChatRoom.jsx","pages/StartPage.jsx","App.js","serviceWorker.js","index.js"],"names":["MyInput","handlePostMessage","chatRoom","className","onClick","style","width","messages","Object","entries","reverse","map","item","key","payload","message","Messages","handleGetChatRoom","messageInputField","useRef","userInputField","ref","type","data","current","value","user","fetch","method","body","JSON","stringify","then","res","json","ChatRoom","useState","setChatRoom","useEffect","name","NewChatRoom","console","log","StartPage","to","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"qPAEe,SAASA,EAAT,GAAmD,IAAhCC,EAA+B,EAA/BA,kBAAmBC,EAAY,EAAZA,SACnD,OACE,6BACE,4BAAQC,UAAU,kBAAkBC,QAASH,GAA7C,gBAIA,wBAAIE,UAAU,0BAA0BE,MAAO,CAAEC,MAAO,SACrDJ,EAASK,UACRC,OAAOC,QAAQP,EAASK,UACrBG,UACAC,KAAI,SAACC,GACJ,IAAMC,EAAMD,EAAK,GACXE,EAAUF,EAAK,GAErB,OACE,wBAAIT,UAAU,4BAA4BU,IAAKA,GACjB,kBAApBC,EAAQC,QACdD,EAAQC,QAER,4DClBL,SAASC,EAAT,GAAoD,IAAhCd,EAA+B,EAA/BA,SAAUe,EAAqB,EAArBA,kBAIrCC,EAAoBC,mBACpBC,EAAiBD,mBAoBvB,OACE,yBAAKhB,UAAU,cACb,yBAAKA,UAAU,sBACb,uCACA,2BAAOA,UAAU,eAAekB,IAAKH,EAAmBI,KAAK,UAE/D,yBAAKnB,UAAU,sBACb,oCACA,2BAAOA,UAAU,oBAAoBkB,IAAKD,EAAgBE,KAAK,UAEjE,kBAACtB,EAAD,CAASC,kBA5Bb,WACE,IACMsB,EAAO,CACXR,QAASG,EAAkBM,QAAQC,MACnCC,KAAMN,EAAeI,QAAQC,OAE/BP,EAAkBM,QAAQC,MAAQ,KAClCL,EAAeI,QAAQC,MAAQ,KAC/BE,MAbA,oFAaW,CACTC,OAAQ,OACRC,KAAMC,KAAKC,UAAUR,KAEpBS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACT,GACLN,QAc6Cf,SAAUA,KCnChD,SAASiC,IACtB,IADiC,EAIHC,mBAAS,IAJN,mBAI5BlC,EAJ4B,KAIlBmC,EAJkB,KAMjC,SAASpB,IAEPU,MANA,4EAOGK,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACT,GAAD,OAAUc,EAAYd,MAKhC,OAHAe,qBAAU,WACRrB,MACC,IAED,yBAAKd,UAAU,aACb,4BAAKD,EAASqC,MACd,kBAACvB,EAAD,CAAUd,SAAUA,EAAUe,kBAAmBA,KClBxC,SAASuB,IACtB,IADoC,EAGEJ,mBAAS,IAHX,6BAuBpC,OAHAE,qBAAU,WAVRX,MARA,sDAQW,CACTC,OAAQ,OACRC,KAAMC,KAAKC,UALA,CACXQ,KAAM,kBAMLP,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACT,GACLkB,QAAQC,IAAInB,QAMf,IAED,6BACE,yBAAKpB,UAAU,aACb,wDAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,sBACb,kDACA,2BAAOA,UAAU,eAAemB,KAAK,WAGzC,4BAAQnB,UAAU,mBAAlB,mB,kBCnCS,SAASwC,IACtB,OACE,6BACE,2DACA,kBAAC,IAAD,CAAMxC,UAAU,4BAA4ByC,GAAG,aAA/C,YAGA,kBAAC,IAAD,CAAMzC,UAAU,4BAA4ByC,GAAG,iBAA/C,iBCeSC,MAlBf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAACX,EAAD,OAEF,kBAAC,IAAD,CAAOW,KAAK,iBACV,kBAACN,EAAD,OAEF,kBAAC,IAAD,CAAOM,KAAK,KACV,kBAACH,EAAD,UCNUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMhD,c","file":"static/js/main.d8f0ca7f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function MyInput({ handlePostMessage, chatRoom }) {\r\n  return (\r\n    <div>\r\n      <button className=\"btn btn-primary\" onClick={handlePostMessage}>\r\n        Send message\r\n      </button>\r\n\r\n      <ul className=\"list-group mt-3 mx-auto\" style={{ width: \"50vw\" }}>\r\n        {chatRoom.messages &&\r\n          Object.entries(chatRoom.messages)\r\n            .reverse()\r\n            .map((item) => {\r\n              const key = item[0];\r\n              const payload = item[1];\r\n\r\n              return (\r\n                <li className=\"list-group-item text-wrap\" key={key}>\r\n                  {typeof payload.message === \"string\" ? (\r\n                    payload.message\r\n                  ) : (\r\n                    <span>Something went wrong</span>\r\n                  )}\r\n                </li>\r\n              );\r\n            })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport MyInput from \"./MyInput\";\r\n\r\nexport default function Messages({ chatRoom, handleGetChatRoom }) {\r\n  const MESSAGE_LIST_URL =\r\n    \"https://mock-data-api.firebaseio.com/chatrooms/-MFZumveIpHH5D_gkUHJ/messages.json\";\r\n\r\n  const messageInputField = useRef();\r\n  const userInputField = useRef();\r\n\r\n  function handlePostMessage() {\r\n    const url = MESSAGE_LIST_URL;\r\n    const data = {\r\n      message: messageInputField.current.value,\r\n      user: userInputField.current.value,\r\n    };\r\n    messageInputField.current.value = null;\r\n    userInputField.current.value = null;\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        handleGetChatRoom();\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <div className=\"form-row col-sm-10\">\r\n        <p>Message:</p>\r\n        <input className=\"form-control\" ref={messageInputField} type=\"text\" />\r\n      </div>\r\n      <div className=\"form-row col-sm-10\">\r\n        <p>User:</p>\r\n        <input className=\"form-control mb-3\" ref={userInputField} type=\"text\" />\r\n      </div>\r\n      <MyInput handlePostMessage={handlePostMessage} chatRoom={chatRoom} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Messages from \"../components/Messages\";\r\n\r\nexport default function ChatRoom() {\r\n  const CHAT_ROOM_URL =\r\n    \"https://mock-data-api.firebaseio.com/chatrooms/-MFZumveIpHH5D_gkUHJ.json\";\r\n\r\n  let [chatRoom, setChatRoom] = useState({});\r\n\r\n  function handleGetChatRoom() {\r\n    const url = CHAT_ROOM_URL;\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => setChatRoom(data));\r\n  }\r\n  useEffect(() => {\r\n    handleGetChatRoom();\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>{chatRoom.name}</h1>\r\n      <Messages chatRoom={chatRoom} handleGetChatRoom={handleGetChatRoom} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport MyNewInput from \"../components/MyNewInput\";\r\n\r\nexport default function NewChatRoom() {\r\n  const NEW_CHAT_ROOM_URL =\r\n    \"https://mock-data-api.firebaseio.com/chatrooms.json\";\r\n  let [chatRoomList, getChatRoomList] = useState({});\r\n\r\n  function handlePostChatRoom() {\r\n    const url = NEW_CHAT_ROOM_URL;\r\n    const data = {\r\n      name: \"funkar rum?\",\r\n    };\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    handlePostChatRoom();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h1>Skapa ett nytt chatroom</h1>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <div className=\"form-row col-sm-10\">\r\n          <p>Namn på chatroom</p>\r\n          <input className=\"form-control\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <button className=\"btn btn-primary\">Skapa chatroom</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// RoomInputField.current.value,\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <div>\r\n      <h1>Välkommen till Chatrooms</h1>\r\n      <Link className=\"btn btn-primary btn-block\" to=\"/chatroom\">\r\n        Chatroom\r\n      </Link>\r\n      <Link className=\"btn btn-primary btn-block\" to=\"/add-chatroom\">\r\n        New Chatroom\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ChatRoom from \"./pages/ChatRoom\";\nimport NewChatRoom from \"./pages/NewChatRoom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport StartPage from \"./pages/StartPage\";\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/chatroom\">\n          <ChatRoom />\n        </Route>\n        <Route path=\"/add-chatroom\">\n          <NewChatRoom />\n        </Route>\n        <Route path=\"/\">\n          <StartPage />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}